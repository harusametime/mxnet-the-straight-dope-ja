{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exponential Smoothing and Innovation State Space Model (ISSM)\n",
    "\n",
    "In this notebook we will illustrate the implementation of filtering in innovation state space model (ISSM, for short) using MXNet. Let us first briefy reivew the basic concepts.\n",
    "\n",
    "\n",
    "Time series forecasting is a central problem occuring in many applications from optimal inventory management, staff scheduling to topology planning. \n",
    "Given a sequence of measurements $z_1, \\ldots, z_T$ observed over time, the problem here is to predict future values of the time series $z_{T+1}, \\ldots, z_{T+\\tau}$, where $\\tau$ is referred as the time horizon.\n",
    "\n",
    "Exponential smoothing (ETS, which stands for *Error, Trend, and Seasonality*) is a family of very successful forecasting methods which are based on the key property that forecasts are weighted combinations of past observations ([Hyndman et. al, 2008](http://www.exponentialsmoothing.net/home)).\n",
    "\n",
    "For example, in simple exponential smoothing, the foreacast $\\hat{z}_{T+1}$ for time step $T+1$ is written as ([Hyndman, Athanasopoulos, 2012](https://www.otexts.org/fpp/7/1))\n",
    "\n",
    "$$ \\hat{z}_{T+1} = \\hat{z}_T + \\alpha (z_T - \\hat{z}_T) = \\alpha\\cdot z_T + (1 - \\alpha)\\cdot \\hat{z}_T, $$\n",
    "\n",
    "In words, the next step forecast is a convex combination of the most recent obseravtion and forecast. Expanding the above equation, it is clear that the forecast is given by the exponentially weighted average of past observations, \n",
    "\n",
    "$$ \\hat{z}_{T+1} = \\alpha z_T + \\alpha(1-\\alpha) z_{T-1} + \\alpha(1-\\alpha)^2 z_{T-2}+ \\cdots. $$\n",
    "\n",
    "Here $\\alpha > 0$ is a smoothing parameter that controls the weight given to each observation.\n",
    "Note that the recent observations are given more weight than the older observations.\n",
    "In fact the weight given to the past observation descreases exponentially as it gets older and hence the name **exponential smoothing**.\n",
    "\n",
    "General exponential smoothing methods consider the extensions of simple ETS to include time series patterns such as (linear) trend, various periodic seasonal effects. All ETS methods falls under the category of forecasting methods as the predictions are point forecasts (a single value is predicted for each future time step). \n",
    "On the other hand a statistical model describes the underlying data generation process and has an advantage that it can produce an entire probability distribuiton for each of the future time steps.\n",
    "Innovation state space model (ISSM) is an example of such models with considerable flexibility in respresnting commonly occurring time series patterns and underlie the exponential smoothing methods.\n",
    "\n",
    "The idea behind ISSMs is to maintain a latent state vector $l_{t}$ with recent information about level, trend, and seasonality factors.\n",
    "The state vector $l_t$ evolves over time adding small *innvoation* (i.e., the Gaussian noise) at each time step. \n",
    "The observations are then a linear combination of the components of the current state.\n",
    "\n",
    "Mathematically, ISSM is specified by two equations\n",
    "\n",
    "* The state transition equation is given by \n",
    "\n",
    "$$l_{t} = F_t l_{t-1} + g_{t}\\epsilon_t,\\quad \\epsilon_t\\sim \\mathcal{N}(0,1).$$\n",
    "\n",
    "Note that the innovation strength is controlled by $g_t$, i.e., $g_t\\epsilon_t \\sim \\mathcal{N}(0, g_t^2)$.\n",
    "\n",
    "* The observation equation is given by\n",
    "\n",
    "$$z_t = a_{t}^{\\top}l_{t-1} + b_t + \\nu_t, \\quad \\nu_t \\sim \\mathcal{N}(0, \\sigma_t^2)$$\n",
    "\n",
    "Note that here we allow for an additional term $b_t$ which can model any determinstic component (exogenous variables).\n",
    "\n",
    "This describes a fairy generic model allowing the user to encode specific time series patterns using the coefficients $F$, $a_t$ and thus are problem dependent. The innovation vector $g_t$ comes in terms of parameters to be learned (the innovation strengths). Moreover, the initial state $l_0$ has to be specified. \n",
    "We do so by specifying a Gaussian prior distribution $P(l_0)$, whose parameters (means, standard deviation) are learned from data as well.\n",
    "\n",
    "The parameters of the ISSM are typically learned using the maximum likelihood principle. \n",
    "This requires the computation of the log-likelihood of the given observations i.e., computing the probability of the data under the model, $P(z_1, \\ldots, z_T)$. Fortunately, in the previous notebook, we have learned how to compute the log-likelihood as a byproduct of LDS filtering problem. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Filtering\n",
    "\n",
    "We remark that ISSM is a special case of linear dynamical system except that the coefficients are allowed to change over time. The filtering equations for ISSM can readily be obtained from the general derivation described in LDS.\n",
    "\n",
    "\n",
    "Note the change in the notation in the following equations for filtered mean ($\\mu_t$) and filtered variance ($S_t$) because of the conflict of notation for the ISSM coefficient $F$. Also note that the deterministic part $b_t$ needs to be subtracted from the observations $[z_t]$. \n",
    "\n",
    "$$\\mu_h = F_t \\mu_{t-1} \\quad \\quad \\quad \\mu_v = a_t^{\\top}\\mu_h$$\n",
    "\n",
    "$$\\Sigma_{hh} = F_t S_{t-1}F_t^T + g_t g_t^T \\quad \\quad \\quad \\sigma^2_{v} = a_t^T\\Sigma_{hh}a_t + \\sigma_t^2$$\n",
    "\n",
    "$$K_t = \\frac{1} {\\sigma^2_{v}} \\Sigma_{hh}a_t $$\n",
    "\n",
    "$$\\mu_t = \\mu_h + K(z_t - b_t -\\mu_v) \\quad \\quad \\quad S_t = (I - K_t a_t^T)\\Sigma_{hh}(I-K_t a_t^T)^T +  \\sigma^2_t K_tK_t^T$$\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import mxnet as mx\n",
    "from mxnet.ndarray import linalg_gemm2 as gemm2\n",
    "import mxnet.ndarray as nd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ISSM Filtering Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def ISSM_filter(z, b, F, a, g, sigma, m_prior, S_prior): \n",
    "    \n",
    "    H = F.shape[0] # dim of latent state\n",
    "    T = z.shape[0] # num of observations\n",
    "    \n",
    "    eye_h = nd.array(np.eye(H))    \n",
    "\n",
    "    mu_seq = []\n",
    "    S_seq = []\n",
    "    log_p_seq = []\n",
    "        \n",
    "    for t in range(T):\n",
    "    \n",
    "        if t == 0:\n",
    "            # At the first time step, use the prior\n",
    "            mu_h = m_prior\n",
    "            S_hh = S_prior\n",
    "        else:\n",
    "            # Otherwise compute using update eqns.\n",
    "            F_t = F[:, :, t]            \n",
    "            g_t = g[:, t].reshape((H,1))    \n",
    "            \n",
    "            mu_h = gemm2(F_t, mu_t)\n",
    "            S_hh = gemm2(F_t, gemm2(S_t, F_t, transpose_b=1)) + \\\n",
    "                   gemm2(g_t, g_t, transpose_b=1)\n",
    "\n",
    "        a_t = a[:, t].reshape((H,1))\n",
    "        mu_v = gemm2(mu_h, a_t, transpose_a=1)\n",
    "\n",
    "        # Compute the Kalman gain (vector)\n",
    "        S_hh_x_a_t = gemm2(S_hh, a_t)\n",
    "        \n",
    "        sigma_t = sigma[t]\n",
    "        S_vv = gemm2(a_t, S_hh_x_a_t, transpose_a=1) + nd.square(sigma_t)\n",
    "        kalman_gain = nd.broadcast_div(S_hh_x_a_t, S_vv)\n",
    "\n",
    "        # Compute the error (delta)\n",
    "        delta = z[t] - b[t] - mu_v\n",
    "\n",
    "        # Filtered estimates\n",
    "        mu_t = mu_h + gemm2(kalman_gain, delta)\n",
    "\n",
    "        # Joseph's symmetrized update for covariance:\n",
    "        ImKa = nd.broadcast_sub(eye_h, gemm2(kalman_gain, a_t, transpose_b=1))\n",
    "        S_t = gemm2(gemm2(ImKa, S_hh), ImKa, transpose_b=1) + \\\n",
    "                nd.broadcast_mul(gemm2(kalman_gain, kalman_gain, transpose_b=1), nd.square(sigma_t))\n",
    "                \n",
    "        # likelihood term\n",
    "        log_p = (-0.5 * (delta * delta / S_vv\n",
    "                         + np.log(2.0 * np.pi)\n",
    "                         + nd.log(S_vv))\n",
    "                 )\n",
    "\n",
    "        mu_seq.append(mu_t)\n",
    "        S_seq.append(S_t)\n",
    "        log_p_seq.append(log_p)\n",
    "\n",
    "\n",
    "    return mu_seq, S_seq, log_p_seq"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data\n",
    "\n",
    "We will use the [10 year US Government Bond Yields dataset](https://datahub.io/core/bond-yields-us-10y) to illustrate two specific instances of ISSM models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "plt.rcParams[\"figure.figsize\"] = (12, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"https://datahub.io/core/bond-yields-us-10y/r/monthly.csv\", header=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df.set_index(\"Date\")\n",
    "\n",
    "# get the time series \n",
    "ts = df.values[:,1]\n",
    "\n",
    "# Let us normalize the time series\n",
    "ts = np.array((ts - np.mean(ts)) / np.std(ts), dtype=np.double)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(ts);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Level ISSM\n",
    "\n",
    "The simplest possible ISSM maintains a level component only. Abusing the notation and let $l_t$ denote *level*, the level ISSM can be written as\n",
    "\n",
    "$$\n",
    "\\begin{split}\n",
    "l_t = \\delta l_{t-1} + \\alpha \\epsilon_t.\n",
    "\\end{split}\n",
    "$$\n",
    "\n",
    "Or in ISSM terminology, \n",
    "$$\n",
    "  a_{t} = [ \\delta ],\\quad F_{t} = [ \\delta ],\\quad g_{t} = [ \\alpha ],\\quad \\alpha>0.\n",
    "$$\n",
    "\n",
    "The level $l_t \\in \\mathbb{R}$ evolves over time by adding a random innovation $\\alpha \\epsilon_t \\sim \\mathcal{N}(0,\\alpha^2)$ to the previous level, so that $\\alpha$ specifies the amount of level drift over time. At time $t$, the previous level $l_{t-1}$ is used in the prediction $z_t$ and then the level is updated. \n",
    "The damping factor $\\delta \\in (0, 1]$ allows the ``damping'' of the level.\n",
    "The initial state prior $P(l_0)$ is given by $l_0 \\sim N(\\mu_0, \\sigma_0^2)$. For Level-ISSM, we learn the parameters $\\alpha>0$, $\\mu_0$, $\\sigma_0>0$.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we will fix the parameters for the illustration of filtering.\n",
    "Learning of the parameters will be discussed in another notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "latent_dim = 1\n",
    "T          = len(ts)\n",
    "\n",
    "# Set the coefficients of the ISSM\n",
    "delta      = 1.0\n",
    "F          = delta * nd.ones((1, 1, T))\n",
    "a          = delta * nd.ones((1, T))\n",
    "\n",
    "# Set the parameters of the ISSM\n",
    "alpha      = 0.5\n",
    "g          = alpha * nd.ones((1, T))\n",
    "\n",
    "m_prior    = nd.zeros((latent_dim, 1))\n",
    "S_prior    = nd.zeros((latent_dim, latent_dim))\n",
    "sigma      = 0.5 * nd.ones((T, 1))\n",
    "b          = nd.zeros((T, 1))\n",
    "z          = nd.array(ts).reshape((T, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "mu_seq, S_seq, _ = ISSM_filter(z, b, F, a, g, sigma, m_prior, S_prior)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calculate the filtered mean and variance of observations\n",
    "\n",
    "\n",
    "Given $p(l_{t-1}|z_{1:t})=\\mathcal{N}(\\mu_t, S_t)$, we can compute the distribution of the reconstructed observations \n",
    "\n",
    "$$\n",
    "p(\\widehat{z_t}) = \\mathcal{N}(a_t^T\\mu_t, a_t^TS_ta_t + \\sigma_t^2).\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from functools import reduce\n",
    "\n",
    "def reconstruct(mu_seq, S_seq):\n",
    "    a_np = a.asnumpy()\n",
    "    T = len(mu_seq)\n",
    "    sigma_np = sigma.asnumpy()\n",
    "    \n",
    "    v_filtered_mean = np.array([a_np[:, t].dot(mu_t.asnumpy()) \n",
    "                                for t, mu_t in enumerate(mu_seq)]\n",
    "                              ).reshape(T, )\n",
    "    \n",
    "    v_filtered_std = np.sqrt(np.array([a_np[:, t].dot(S_t.asnumpy()).dot(a_np[:, t]) + \n",
    "                                       np.square(sigma_np[t]) \n",
    "                                       for t, S_t in enumerate(S_seq)]).reshape((T,)))\n",
    "    \n",
    "    return v_filtered_mean, v_filtered_std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "reconst_mean, reconst_std = reconstruct(mu_seq, S_seq)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Forecast\n",
    "\n",
    "One advantage of the ISSM model is that one can obtain the complete probability distribution for each of the future time steps:\n",
    "\n",
    "$$\n",
    "p(\\widehat{z_{T+t}}) = \\mathcal{N}(a_{T+t}^T\\mu_{T+t}, a_{T+t}^TS_{T+t}a_{T+t} + \\sigma_{T+t}^2),\\quad t > 0 \\\\\n",
    "p(l_{T+t}) = \\mathcal{N}(F\\mu_{T+t-1}, FS_{T+t-1}F^T + g_{T+t} g_{T+t}^T)\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def forecast(mu_last_state, S_last_state, F, a, g, sigma, horizon):\n",
    "    \n",
    "    forecasts_mean = []\n",
    "    forecasts_std = []\n",
    "    \n",
    "    mu_last_state = mu_last_state.asnumpy()\n",
    "    S_last_state = S_last_state.asnumpy()\n",
    "    F = F.asnumpy()\n",
    "    a = a.asnumpy()\n",
    "    g = g.asnumpy()\n",
    "    sigma = sigma.asnumpy()\n",
    "    \n",
    "    for t in range(horizon):\n",
    "        a_t = a[:, t]\n",
    "        forecast_mean = a_t.dot(mu_last_state)[0]\n",
    "        forecast_std = a_t.dot(S_last_state).dot(a_t) + np.square(sigma[t])[0]\n",
    "        \n",
    "        forecasts_mean.append(forecast_mean)\n",
    "        forecasts_std.append(forecast_std)\n",
    "                    \n",
    "        mu_last_state = F[:, :, t].dot(mu_last_state)\n",
    "        S_last_state = F[:, :, t].dot(S_last_state).dot(F[:, :, t].T)\n",
    "        \n",
    "    return np.array(forecasts_mean), np.array(forecasts_std)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Let us use the same cofficients (constant over time) for the future as well\n",
    "forecasts_mean, forecasts_std = forecast(mu_seq[-1], \n",
    "                                          S_seq[-1], \n",
    "                                          F, a, g, sigma, horizon=13)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot the reconstruction as well as the forecasts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def plot_reconstruction_forecasts(v_filtered_mean, v_filtered_std, forecasts_mean, forecasts_std):\n",
    "\n",
    "    plt.plot(ts, color=\"r\")\n",
    "    plt.plot(v_filtered_mean, color=\"b\")\n",
    "    T = len(v_filtered_mean)\n",
    "    x = np.arange(T)\n",
    "    plt.fill_between(x, v_filtered_mean-v_filtered_std, \n",
    "                     v_filtered_mean+v_filtered_std, \n",
    "                     facecolor=\"blue\", alpha=0.2)\n",
    "    \n",
    "    plt.plot(np.arange(T, T+len(forecasts_mean)), forecasts_mean, color=\"g\")\n",
    "    plt.fill_between(np.arange(T, T+len(forecasts_mean)), forecasts_mean-forecasts_std, \n",
    "                     forecasts_mean+forecasts_std, \n",
    "                     facecolor=\"green\", alpha=0.2)\n",
    "    \n",
    "    plt.legend([\"data\", \"reconstruction\", \"forecasts\"]);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_reconstruction_forecasts(reconst_mean, reconst_std, forecasts_mean, forecasts_std)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Level Trend ISSM\n",
    "\n",
    "We can model a piecewise linear random process by using a two-dimensional latent state $l_{t}\\in \\mathbb{R}^2$, where one dimension represents the level (again with a slight abusing of notation, $l$) and the other represents the trend (slope) $b$. \n",
    "\n",
    "$$\n",
    "\\begin{split}\n",
    "  l_t &= \\delta l_{t - 1} + \\gamma b_{t - 1} + \\alpha\\cdot\\epsilon_t\\\\\n",
    "  b_t &= \\gamma b_{t - 1} + \\beta\\cdot\\epsilon_t\n",
    "  \\end{split}\n",
    "$$\n",
    "\n",
    "\n",
    "In ISSM framework, such a (Damped) LevelTrend-ISSM is given by\n",
    "\n",
    "$$\n",
    "  a_{t} = \\left[\\begin{array}{c}\n",
    "    \\delta \\\\\n",
    "    \\gamma\n",
    "  \\end{array}\\right], \\quad F_{t} = \\left[\\begin{array}{cc}\n",
    "    \\delta & \\gamma \\\\\n",
    "    0 & \\gamma\n",
    "  \\end{array}\\right], \\quad g_{t} = \\left[\\begin{array}{c}\n",
    "    \\alpha \\\\\n",
    "    \\beta\n",
    "  \\end{array}\\right],\n",
    "$$\n",
    "\n",
    "where $\\alpha>0$, $\\beta>0$ and the damping factors $\\delta, \\gamma \\in (0, 1]$.\n",
    "Both the level and slope components evolve over time by adding innovations $\\alpha \\epsilon_t$ and $\\beta \\epsilon_t$ respectively, so that $\\beta>0$ is the innovation strength for the slope. The level at time $t$ is the sum of level at $t-1$ and slope at $t-1$ (linear prediction) modulo the damping factors for level $\\delta$ and growth $\\gamma$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "latent_dim = 2\n",
    "T          = len(ts)\n",
    "\n",
    "# Set the coefficients of the ISSM\n",
    "damp_fact = 1.0\n",
    "damp_growth = 1.0\n",
    "\n",
    "# Set the parameters of the ISSM\n",
    "alpha      = 0.5 \n",
    "beta       = 0.1 \n",
    "g_t        = nd.array([alpha, beta])\n",
    "g          = nd.repeat(g_t, T).reshape((latent_dim, T))\n",
    "\n",
    "# F and a are constant over time\n",
    "F_t = nd.reshape(nd.array([damp_fact, damp_growth, 0, damp_growth]), (latent_dim, latent_dim))\n",
    "a_t = nd.array([damp_fact, damp_growth])\n",
    "F   = nd.repeat(F_t, T).reshape((latent_dim, latent_dim, T))\n",
    "a   = nd.repeat(a_t, T).reshape((latent_dim, T))\n",
    "\n",
    "m_prior    = nd.zeros((latent_dim, 1))\n",
    "S_prior    = nd.zeros((latent_dim, latent_dim))\n",
    "sigma      = 0.5 * nd.ones((T, 1))\n",
    "b          = nd.zeros((T, 1))\n",
    "z          = nd.array(ts).reshape((T, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "mu_seq, S_seq, _ = ISSM_filter(z, b, F, a, g, sigma, m_prior, S_prior)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Let us use the same cofficients (constant over time) for the future as well\n",
    "forecasts_mean, forecasts_std = forecast(mu_seq[-1], \n",
    "                                          S_seq[-1], \n",
    "                                          F, a, g, sigma, horizon=13)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot the reconstruction as well as the forecasts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "reconst_mean, reconst_std = reconstruct(mu_seq, S_seq)\n",
    "plot_reconstruction_forecasts(reconst_mean, reconst_std, forecasts_mean, forecasts_std)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
